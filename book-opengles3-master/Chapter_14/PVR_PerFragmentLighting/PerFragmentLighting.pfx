[HEADER]
	VERSION		00.00.00.00
	DESCRIPTION PerFragmentLighting
[/HEADER]

[TEXTURE]
	NAME 			baseMap 
	PATH			baseMap.pvr 
	MINIFICATION	LINEAR
	MAGNIFICATION	LINEAR
[/TEXTURE]

[TEXTURE]
	NAME 			bumpMap 
	PATH			bumpMap.pvr 
	MINIFICATION	LINEAR
	MAGNIFICATION	LINEAR
[/TEXTURE]

[VERTEXSHADER]
	NAME VertShader
	
	[GLSL_CODE]
#version 300
uniform mat4 u_matViewInverse;
uniform mat4 u_matViewProjection;
uniform vec3 u_lightPosition;
uniform vec3 u_eyePosition;

in vec4 a_vertex;
in vec2 a_texcoord0;
in vec3 a_normal;
in vec3 a_binormal;
in vec3 a_tangent;

out vec2 v_texcoord;
out vec3 v_viewDirection;
out vec3 v_lightDirection;
   
void main( void )
{
   // Transform eye vector into world space
   vec3 eyePositionWorld = (u_matViewInverse * vec4(u_eyePosition, 1.0)).xyz;
   
   // Compute world-space direction vector
   vec3 viewDirectionWorld = eyePositionWorld - a_vertex.xyz;
      
   // Transform light position into world space
   vec3 lightPositionWorld = (u_matViewInverse * vec4(u_lightPosition, 1.0)).xyz;   
   
   // Compute world-space light direction vector
   vec3 lightDirectionWorld = lightPositionWorld - a_vertex.xyz;
   
   // Create the tangent matrix
   mat3 tangentMat = mat3( a_tangent, 
                           a_binormal,
                           a_normal );   
   
   // Transform the view and light vectors into tangent space
   v_viewDirection = viewDirectionWorld * tangentMat;
   v_lightDirection = lightDirectionWorld * tangentMat;
      
   // Transform output position
   gl_Position = u_matViewProjection * a_vertex;
   
   // Pass through texture coordinate
   v_texcoord = a_texcoord0.xy;

}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME FragShader

	[GLSL_CODE]
#version 300
precision mediump float;

uniform vec4 u_ambient;
uniform vec4 u_specular;
uniform vec4 u_diffuse;
uniform float u_specularPower;

uniform sampler2D s_baseMap;
uniform sampler2D s_bumpMap;

in vec2 v_texcoord;
in vec3 v_viewDirection;
in vec3 v_lightDirection;

layout(location = 0) out vec4 fragColor;
void main( void )
{
   // Fetch basemap color
   vec4 baseColor = texture( s_baseMap, v_texcoord );
   
   // Fetch the tangent space normal from normal map
   vec3 normal = texture( s_bumpMap, v_texcoord ).xyz;
   
   // Scale and bias from [0, 1] to [-1, 1] and normalize
   normal = normalize( normal * 2.0 - 1.0 );
   
   // Normalize the light direction and view direction
   vec3 lightDirection = normalize( v_lightDirection );
   vec3 viewDirection = normalize( v_viewDirection );
   
   // Compute N.L
   float nDotL = dot( normal, lightDirection );
   
   // Compute reflection vector
   vec3 reflection = ( 2.0 * normal * nDotL ) - lightDirection;
   
   // Compute R.V
   float rDotV = max( 0.0, dot( reflection, viewDirection ) );
   
   // Compute Ambient term
   vec4 ambient = u_ambient * baseColor;
   
   // Compute Diffuse term
   vec4 diffuse = u_diffuse * nDotL * baseColor;
   
   // Compute Specular term
   vec4 specular = u_specular * pow( rDotV, u_specularPower );
   
   // Output final color
   fragColor = ambient + diffuse + specular;     
}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
 
[EFFECT] 
	NAME    DefaultEffect

	ATTRIBUTE a_vertex			POSITION
	ATTRIBUTE a_texcoord0		UV0
	ATTRIBUTE a_normal			NORMAL
	ATTRIBUTE a_tangent			TANGENT
	ATTRIBUTE a_binormal		BINORMAL

	UNIFORM u_matViewProjection	WORLDVIEWPROJECTION
	UNIFORM u_matViewInverse	WORLDVIEWI
	UNIFORM u_lightPosition		LIGHTDIRWORLD0
	UNIFORM u_eyePosition		EYEPOSWORLD

	UNIFORM u_ambient			MATERIALCOLORAMBIENT vec4(0.37,0.37,0.37,1.0)
	UNIFORM u_diffuse			MATERIALCOLORDIFFUSE vec4(0.88,0.88,0.88,1.0)
	UNIFORM u_specular			MATERIALCOLORSPECULAR vec4(0.5,0.5,0.5,1.0)
	UNIFORM u_specularPower		MATERIALSHININESS float(25.0)
	
	UNIFORM	s_baseMap			TEXTURE0
	UNIFORM	s_bumpMap			TEXTURE1

	TEXTURE 0 baseMap
	TEXTURE 1 bumpMap
	
	FRAGMENTSHADER  FragShader
	VERTEXSHADER    VertShader
[/EFFECT]
