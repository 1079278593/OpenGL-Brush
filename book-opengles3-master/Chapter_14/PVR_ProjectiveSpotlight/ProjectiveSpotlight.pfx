[HEADER]
	VERSION		00.00.00.00
	DESCRIPTION Basic Texturing
	COPYRIGHT	Imagination Technologies Ltd.
[/HEADER]

[TEXTURE]
	NAME base	
	PATH shaman_basemap.pvr	
	MINIFICATION LINEAR
	MAGNIFICATION LINEAR
[/TEXTURE]

[TEXTURE]
	NAME spotlight	
	PATH spotlight.pvr	
	MINIFICATION LINEAR
	MAGNIFICATION LINEAR
	WRAP_S CLAMP
	WRAP_T CLAMP
[/TEXTURE]

[VERTEXSHADER]
	NAME VertShader
	
	[GLSL_CODE]
#version 300	
uniform float u_time_0_X;
uniform mat4 u_matProjection;
uniform mat4 u_matViewProjection;
in vec4 a_vertex;
in vec2 a_texCoord0;
in vec3 a_normal;

out vec2 v_texCoord;
out vec3 v_projTexCoord;
out vec3 v_normal;
out vec3 v_lightDir;

void main( void )
{
  gl_Position = u_matViewProjection * a_vertex;
  v_texCoord = a_texCoord0.xy;
    
  // Compute a light position based on time
  vec3 lightPos;
  lightPos.x = cos(u_time_0_X);
  lightPos.z = sin(u_time_0_X);
  lightPos.xz = 200.0 * normalize(lightPos.xz);
  lightPos.y = 200.0;
  
  // Compute the light coordinate axes
  vec3 look = -normalize( lightPos );
  vec3 right = cross( vec3( 0.0, 0.0, 1.0), look );
  vec3 up = cross( look, right );
    
  // Create a view matrix for the light
  mat4 lightView = mat4( right, dot( right, -lightPos ),
                         up,    dot( up, -lightPos ),
                         look,  dot( look, -lightPos),
                         0.0, 0.0, 0.0, 1.0 );
                         
  // Transform position into light view space                         
  vec4 objPosLight = a_vertex * lightView;
  
  // Transform position into projective light view space
  objPosLight = u_matProjection * objPosLight;
  
  // Create bias matrix
  mat3 biasMatrix = mat3( 0.5,  0.0, 0.5,
                          0.0, -0.5, 0.5, 
                          0.0,  0.0, 1.0 );
  
  // Compute projective texture coordinates
  v_projTexCoord = objPosLight.xyz * biasMatrix;
  
  v_lightDir = normalize(a_vertex.xyz - lightPos);
  v_normal = a_normal;
 
}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME FragShader

	[GLSL_CODE]
#version 300
precision mediump float;

uniform sampler2D baseMap;
uniform sampler2D spotLight;
in vec2 v_texCoord;
in vec3 v_projTexCoord;
in vec3 v_normal;
in vec3 v_lightDir;
out vec4 outColor;

void main( void )
{
    // Projective fetch of spotlight 
    vec4 spotLightColor = textureProj( spotLight, v_projTexCoord );

    // Basemap
    vec4 baseColor = texture( baseMap, v_texCoord );
    
    // Compute N.L
    float nDotL = max( 0.0, -dot( v_normal, v_lightDir ) );   
    
    outColor = spotLightColor * baseColor * 2.0 * nDotL;

}	
	[/GLSL_CODE]
[/FRAGMENTSHADER]
 
[EFFECT] 
	NAME    DefaultEffect

	ATTRIBUTE a_vertex			POSITION
	ATTRIBUTE a_texCoord0		UV0
	ATTRIBUTE a_normal			NORMAL

	UNIFORM u_matViewProjection	WORLDVIEWPROJECTION
	UNIFORM u_matProjection		PROJECTION
	UNIFORM u_time_0_X			TIME
	
	UNIFORM	baseMap	TEXTURE0
	TEXTURE 0 base
	UNIFORM spotLight TEXTURE1
	TEXTURE 1 spotlight

	FRAGMENTSHADER  FragShader
	VERTEXSHADER    VertShader
[/EFFECT]
